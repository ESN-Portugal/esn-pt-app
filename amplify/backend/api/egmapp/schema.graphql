type Organization @model @auth(rules: [{allow: private, operations: [read]}]) {
  id: ID!
  name: String!
  description: String
  logoURL: AWSURL
  website: AWSURL
  contactEmail: AWSEmail
}

type UserProfile @model @auth(rules: [{allow: owner}]) {
  id: ID!
  firstName: String!
  lastName: String!
  languages: [String]
  fieldOfExpertise: String
  ESNCountry: String
  ESNSection: String
  contactEmail: AWSEmail
  contactPhone: AWSPhone
  bio: String
  openToJob: Boolean
}

type UserFavoriteSession @model @auth(rules: [{allow: owner}]) {
  id: ID!
  sessionId: String!
}

type Venue @model @auth(rules: [{allow: private, operations: [read]}]) {
  id: ID!
  name: String!
  address: String
  longitude: Float!
  latitude: Float!
  description: String
  imageURL: AWSURL
  planImageURL: AWSURL
}

type Speaker @model @auth(rules: [{allow: private, operations: [read]}]) {
  id: ID!
  name: String!
  title: String
  description: String
  imageURL: AWSURL
  contactEmail: AWSEmail
  Organization: Organization! @hasOne
  Sessions: [Session] @manyToMany(relationName: "SessionSpeaker")
}

enum SessionType {
  PARTNER
  WORKSHOP
  SMALL_SESSION
  KEYNOTE
}

type Session @model @auth(rules: [{allow: private, operations: [read]}]) {
  id: ID!
  name: String!
  description: String
  type: SessionType!
  startsAt: AWSDateTime!
  endsAt: AWSDateTime!
  Venue: Venue! @hasOne
  Speakers: [Speaker] @manyToMany(relationName: "SessionSpeaker")
}
 