openapi: 3.0.3

info:
  title: EGM API
  version: 3.0.2
  contact:
    name: EGM Technical Lead
    email: egm-technical@esn.org
    url: https://esn.org

servers:
  # if needed, substitute the correct API URL
  - url: https://api.egm.link/{environment}
    variables:
      environment:
        enum: [dev, prod]
        default: dev
        description: The API stage

externalDocs:
  description: Models documentation
  url: https://github.com/uatisdeproblem/egm-app/blob/main/back-end/src/models # @todo change this to ESN Repo

tags:
  - name: Status
    description: The app's status
  - name: Login
    description: Access the platform
  - name: Profiles
    description: The user profiles

paths:
  /status:
    get:
      summary: Get the status of the app, depending on its version
      tags: [Status]
      parameters:
        - name: v
          in: query
          description: App version; if not specified, targets the latest version
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/AppStatus'
  /login:
    get:
      summary: Manage the login accepted request from ESN Accounts and prepare a token to authenticate the user
      description: Acquire the CAS ticket, validate it, create the user (if necessary) and return a token.
      tags: [Login]
      parameters:
        - name: ticket
          in: query
          description: The CAS ticket of successful login with ESN Accounts
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
  /esners:
    patch:
      summary: Actions on the users.
      description: For users coming from galaxy.
      tags: [Profiles]
      security:
        - AuthFunction: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [GET_IMAGE_UPLOAD_URL]
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
    delete:
      summary: Remove the user's profile.
      description: Users can delete their own data. Assistants can delete everyone's
      tags: [Profiles]
      security:
        - AuthFunction: []
      responses:
        200:
          $ref: '#/components/responses/UserProfile'
        400:
          $ref: '#/components/responses/BadParameters'
  /esners/{userId}:
    get:
      summary: Get an ESNer's profile.
      tags: [Profiles]
      security:
        - AuthFunction: []
      parameters:
        - name: userId
          in: path
          description: The user's galaxy ID.
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/UserProfile'
        400:
          $ref: '#/components/responses/BadParameters'
    patch:
      summary: Actions on an user.
      description: Only for admins.
      tags: [Profiles]
      security:
        - AuthFunction: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [CHANGE_ROLE]
                role:
                  type: number
                  enum: [CHANGE_ROLE]
      responses:
        200:
          $ref: '#/components/responses/UserProfile'
        400:
          $ref: '#/components/responses/BadParameters'
  /externals:
    patch:
      summary: Actions on the users.
      description: For external users.
      tags: [Profiles]
      security:
        - CognitoUserPool: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [GET_IMAGE_UPLOAD_URL]
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
  /externals/{userId}:
    get:
      summary: Get an external's profile.
      tags: [Profiles]
      security:
        - CognitoUserPool: []
      parameters:
        - name: userId
          in: path
          description: The user's Cognito userId.
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/UserProfile'
        400:
          $ref: '#/components/responses/BadParameters'
    delete:
      summary: Remove the user's profile and Cognito credentials.
      description: Can only delete own data!
      tags: [Profiles]
      security:
        - CognitoUserPool: []
      responses:
        200:
          $ref: '#/components/responses/UserProfile'
        400:
          $ref: '#/components/responses/BadParameters'
    put:
      summary: Change the user's profile.
      description: Externals can change their own data.
      tags: [Profiles]
      security:
        - CognitoUserPool: []
      parameters:
        - name: userId
          in: path
          description: The user's Cognito userId.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
      responses:
        200:
          $ref: '#/components/responses/UserProfile'
        400:
          $ref: '#/components/responses/BadParameters'
    patch:
      summary: Actions on an user.
      description: Only for admins.
      tags: [Profiles]
      security:
        - CognitoUserPool: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [CHANGE_ROLE]
                role:
                  type: number
                  enum: [CHANGE_ROLE]
      responses:
        200:
          $ref: '#/components/responses/UserProfile'
        400:
          $ref: '#/components/responses/BadParameters'
  /esners/registrations:
    get:
      summary: Get an all registrations.
      description: Requires to be an admin # @todo check this permission
      tags: [Registrations]
      security:
        - AuthFunction: []
      responses:
        200:
          $ref: '#/components/responses/Registrations'
        400:
          $ref: '#/components/responses/BadParameters'
  /esners/registrations/{registrationId}:
    get:
      summary: Get a registration.
      tags: [Login]
      security:
        - AuthFunction: []
      parameters:
        - name: registrationId
          in: path
          description: The registration ID.
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Registration'
        400:
          $ref: '#/components/responses/BadParameters'
    put:
      summary: Update the registration.
      description: Can only update if it hasn't been submitted yet.
      tags: [Login]
      security:
        - AuthFunction: []
      parameters:
        - name: registrationId
          in: path
          description: The registration ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Registration'
      responses:
        200:
          $ref: '#/components/responses/Registration'
        400:
          $ref: '#/components/responses/BadParameters'
    patch:
      summary: Actions on a registration.
      tags: [Profiles]
      security:
        - AuthFunction: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [APPROVE, SUBMIT, CANCEL]
                status:
                  type: number
                  enum: [APPROVE, SUBMIT, CANCEL]
      responses:
        200:
          $ref: '#/components/responses/Registration'
        400:
          $ref: '#/components/responses/BadParameters'
  /externals/registrations/{registrationId}:
    get:
      summary: Get a registration.
      tags: [Registrations]
      security:
        - CognitoUserPool: []
      parameters:
        - name: registrationId
          in: path
          description: The registration ID.
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Registration'
        400:
          $ref: '#/components/responses/BadParameters'
    put:
      summary: Update the registration.
      description: Can only update if it hasn't been submitted yet.
      tags: [Registrations]
      security:
        - CognitoUserPool: []
      parameters:
        - name: registrationId
          in: path
          description: The registration ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Registration'
      responses:
        200:
          $ref: '#/components/responses/Registration'
        400:
          $ref: '#/components/responses/BadParameters'
    patch:
      summary: Actions on a registration.
      tags: [Profiles]
      security:
        - CognitoUserPool: []
      parameters:
        - name: registrationId
          in: path
          description: The registration ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [APPROVE, SUBMIT, CANCEL]
                status:
                  type: number
                  enum: [APPROVE, SUBMIT, CANCEL]
      responses:
        200:
          $ref: '#/components/responses/Registration'
        400:
          $ref: '#/components/responses/BadParameters'

components:
  schemas:
    AppStatus:
      type: object
      additionalProperties: {}
    UserProfile:
      type: object
      additionalProperties: {}
    Registration:
      type: object
      additionalProperties: {}

  responses:
    AppStatus:
      description: The app status for the targeted version
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/AppStatus'
    UserProfile:
      description: A standardized user profile for both ESNers and externals
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/UserProfile'
    Registration:
      description: A user's registration
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/Registration'
    Registrations:
      description: A list of user registrations
      content:
        application/json:
          schema:
            type: array
            $ref: '#/components/schemas/Registration'
    BadParameters:
      description: Bad input parameters
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: The request isn't valid
    OperationCompleted:
      description: Operation completed

  securitySchemes:
    CognitoUserPool:
      type: apiKey
      name: Authorization
      in: header
    AuthFunction:
      type: apiKey
      name: Authorization
      in: header
